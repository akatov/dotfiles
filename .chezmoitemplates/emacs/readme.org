#+TITLE: Akamacs
#+AUTHOR: Dmitri Akatov

* Intro

[[https://travis-ci.org/akatov/akamacs][https://travis-ci.org/akatov/akamacs.svg?branch=master]]

This file is loaded by [[file:init.el][init.el]], through
~(org-babel-load-file (expand-file-name "readme.org" user-emacs-directory))~

* Startup
** Header

This is to remind me in case I start editing [[file:readme.el][readme.el]] by mistake...

#+BEGIN_SRC emacs-lisp
;;; readme.el --- autogenerated by org-babel-load-file from readme.org ;;;
;;  -------------- do not edit this file directly --------------------  ;;
#+END_SRC

** debug on error

start debugger on any errors

#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

** Package Management

*** package sources

#+BEGIN_SRC emacs-lisp
;; @see https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC

*** paradox

#+BEGIN_SRC emacs-lisp
(package-initialize)
(unless (package-installed-p 'paradox)
  (package-refresh-contents)
  (package-install 'paradox))
#+END_SRC

*** use-package and friends

use use-package to configure (and install) everything else

#+BEGIN_SRC emacs-lisp
(paradox-require 'use-package)
(paradox-require 'bind-key)
(paradox-require 'diminish)
(paradox-require 'add-hooks)
(setq package-check-signature nil)
#+END_SRC

* Built-in Packages
** dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config (setq dired-dwim-target t))
#+END_SRC

** hl-line

#+BEGIN_SRC emacs-lisp
  (use-package hl-line
	       :config (set-face-background 'hl-line "#073642"))
#+END_SRC

** js

#+BEGIN_SRC emacs-lisp
(use-package js
  :config (setq js-indent-level 2))
#+END_SRC

** subword

#+BEGIN_SRC emacs-lisp
(use-package subword
  :hook ((haskell-mode
	  coffee-mode
	  js-mode
	  js2-mode
	  typescript-mode) . subword-mode))
#+END_SRC

* Defaults Config

** Frame

#+BEGIN_SRC emacs-lisp
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))
#+END_SRC

** General

Just answer `y` or `n`.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Custom-File

Keep custom settings in a [[file:custom.el][separate]] custom file.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC

I try to keep the custom file empty, and instead put all the customizations in
this file. Hence the custom file is gitignored.

** Backup Files

Place backup files in emacs's temp directory

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      '(("." . "~/.emacs.d/temp")))
#+END_SRC

** Lock Files

Lock files will interefere with some auto-build tools

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

** General Customizations

These are the customizations that may have lived in the custom file,
and don't have anything to do with any specific mode refered to
from use-package...

#+BEGIN_SRC emacs-lisp
(ido-mode 'buffers)    ;; I only like ido-mode for switching buffers.
(blink-cursor-mode)    ;; turn blinking on
(column-number-mode t) ;; show columns
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount
      '((nil . 1)
	((control) . 3)
	((shift) . 5)
	((control shift) . 7)
	((meta) . 9)
	((meta control) . 11)
	((meta shift) . 13)
	((meta shift control) . 1.0)))
#+END_SRC

** Global Keybindings

Some global keybindings I like to use...

#+BEGIN_SRC emacs-lisp
(bind-keys ("M-g h" . windmove-left)
           ("M-g j" . windmove-down)
           ("M-g k" . windmove-up)
           ("M-g l" . windmove-right)
           ("M-g M-h" . windmove-left)
           ("M-g M-j" . windmove-down)
           ("M-g M-k" . windmove-up)
           ("M-g M-l" . windmove-right)
           ("C-h" . delete-backward-char) ; like in the terminal
           ("M-h" . help-command)) ; rebind the help command
(bind-key "<s-return>" 'toggle-frame-fullscreen)
#+END_SRC

* Private Config

Some configuration settings I don't want the world to see.
I keep them in a separate private repo.

#+BEGIN_SRC emacs-lisp
(let ((private-emacs-file "~/.config/emacs/private.org"))
  (if (file-exists-p private-emacs-file)
      (org-babel-load-file private-emacs-file)))
#+END_SRC

* Custom Config

** Edit Config

quickly edit this file

#+BEGIN_SRC emacs-lisp
(defun config ()
  (interactive)
  (switch-to-buffer
   (find-file
    (expand-file-name "readme.org" user-emacs-directory))))
#+END_SRC

** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Locally Defined Packages

** fira-code-mode

#+BEGIN_SRC emacs-lisp
(use-package fira-code-mode
  :ensure t
  :hook (js-mode js2-mode typescript-mode))
#+END_SRC

* Downloaded Packages

** ace-jump-mode

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind (("C-;" . ace-jump-mode)
	 ("C-c SPC" . ace-jump-mode)
	 ("C-c C-SPC" . ace-jump-mode)))
#+END_SRC

** add-hooks

#+BEGIN_SRC emacs-lisp
(use-package add-hooks
  :ensure t)
#+END_SRC

** ag

#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC

** alchemist
#+BEGIN_SRC emacs-lisp
(use-package alchemist
  :ensure t)
#+END_SRC

** async

#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t)
#+END_SRC

** auto-complete

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t)
#+END_SRC

** auto-highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package auto-highlight-symbol
  :ensure t)
#+END_SRC

** cider

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :init
  (setq nrepl-hide-special-buffers t
	cider-repl-pop-to-buffer-on-connect nil
	cider-popup-stacktraces nil
	cider-repl-popup-stacktraces t))
#+END_SRC

** clojure-mode

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t)
#+END_SRC

** company

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  ;; :init
  ;; (global-company-mode)
  )
#+END_SRC

** TODO company-emoji

#+BEGIN_SRC emacs-lisp
;; (use-package company-emoji
;;   :if (window-system)
;;   :init
;;   (defun --set-emoji-font (frame)
;;     "Adjust the font settings of FRAME so Emacs can display emoji properly."
;;     (if (eq system-type 'darwin)
;; 	;; For NS/Cocoa
;; 	(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
;;       ;; For Linux
;;       (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

;;   ;; For when Emacs is started in GUI mode:
;;   (--set-emoji-font nil)
;;   ;; Hook for when a frame is created with emacsclient
;;   ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
;;   :config
;;   (add-to-list 'company-backends 'company-emoji)
;;   (add-hook 'after-make-frame-functions '--set-emoji-font)
;;   (setq company-emoji-insert-unicode nil))
#+END_SRC
   
** company-quickhelp

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  ;; :init
  ;; (company-quickhelp-mode 1)
  )
#+END_SRC

** cyberpunk-theme

#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
			:box nil)
    (set-face-attribute `mode-line-inactive nil
			:box nil)))
#+END_SRC

** diminish

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC

** discover-my-major

#+BEGIN_SRC emacs-lisp
(use-package discover-my-major
  :bind (("M-h M-m" . discover-my-major)
         ("M-h M-M" . discover-my-mode)))
#+END_SRC

** TODO edts

#+BEGIN_SRC emacs-lisp
(use-package edts
  :ensure t)
#+END_SRC

** elixir-mode

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :ensure t)
#+END_SRC

** epl

#+BEGIN_SRC emacs-lisp
(use-package epl
  :ensure t)
#+END_SRC

** erlang

#+BEGIN_SRC emacs-lisp
(use-package erlang
  :ensure t)
#+END_SRC

** eslint-fix

#+BEGIN_SRC emacs-lisp
;; (use-package eslint-fix
;;   :init
;;   (add-hook 'js2-mode-hook
;;             (lambda () 
;;               (add-hook 'after-save-hook 'eslint-fix nil t)
;;               ))
;;   (add-hook 'js-mode-hook
;;             (lambda () 
;;               (add-hook 'after-save-hook 'eslint-fix nil t)
;;               )))
#+END_SRC

** exec-path-from-shell

In NextStep (OSX) window mode load the path settings from the shell

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (setq exec-path-from-shell-variables
	'("PATH"
	  "MANPATH"
	  "GOPATH"
	  "MAVEN_OPTS"))
  (exec-path-from-shell-initialize))
#+END_SRC

** handlebars-sgml-mode

#+BEGIN_SRC emacs-lisp
(use-package handlebars-sgml-mode
  :ensure t)
#+END_SRC

** jabber

#+BEGIN_SRC emacs-lisp
;; (use-package jabber
;;              ;; :ensure t
;;              )
#+END_SRC

** js-comint

#+BEGIN_SRC emacs-lisp
(use-package js-comint
  :ensure t
  :init
  (add-hook 'js2-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
	      (local-set-key (kbd "C-c b") 'js-send-buffer))))
#+END_SRC

** js2-highlight-vars

#+BEGIN_SRC emacs-lisp
;; (use-package js2-highlight-vars
;;   :init
;;   (add-hook 'js2-mode-hook 'js2-highlight-vars-mode))
#+END_SRC

** js2-mode

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :init
  (setq inferior-js-program-command "node")
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . js2-mode)))
#+END_SRC

** less-css-mode

#+BEGIN_SRC emacs-lisp
(use-package less-css-mode
  :ensure t)
#+END_SRC

** lua-mode

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t)
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (bind-key "C-x g" 'magit-status))
#+END_SRC

** magit-popup

#+BEGIN_SRC emacs-lisp
(use-package magit-popup
  :ensure t)
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC

** monokai-theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

** neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :init
  (bind-key [f8] 'neotree-toggle))
#+END_SRC

** ob-restclient
#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :ensure t)
#+END_SRC
** ob-http

#+BEGIN_SRC emacs-lisp
(use-package ob-http
  :ensure t)
#+END_SRC

** org

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-use-speed-commands t)
(setq org-return-follows-link nil)
(setq org-src-preserve-indentation t)
#+END_SRC

** org-babel

#+BEGIN_SRC emacs-lisp
;; todo: find a better location for this
(setq org-ditaa-jar-path
      "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar")
(setq org-plantuml-jar-path
      "/usr/local/Cellar/plantuml/1.2017.14/libexec/plantuml.jar")

(org-babel-do-load-languages 'org-babel-load-languages
			     '((emacs-lisp . t)
			       (plantuml   . t)
			       (python     . t)
			       (ditaa      . t)
			       (clojure    . t)
			       (shell      . t)
			       (http       . t)))

;; Use cider as the clojure execution backend
(setq org-babel-clojure-backend 'cider)

;; Let's have pretty source code blocks
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively        t
      org-src-fontify-natively         t
      org-confirm-babel-evaluate       nil)
#+END_SRC

** org-plus-contrib

#+BEGIN_SRC emacs-lisp
;; (use-package org-plus-contrib
;; 	     :ensure t)
#+END_SRC

** origami

#+BEGIN_SRC emacs-lisp
(use-package origami
  :ensure t
  ;; TODO: keybindings
  )
#+END_SRC

** ox-reveal

#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure t)
#+END_SRC

** TODO org-drill

** TODO package-build

** TODO pallet

** TODO paredit

#+BEGIN_SRC emacs-lisp
;; (use-package paredit
;; 	     :ensure t
;; 	     :init

;; 	     (autoload 'enable-paredit-mode "paredit"
;; 	       "Turn on pseudo-structural editing of Lisp code."
;; 	       t)

;; 	     (defvar electrify-return-match
;; 	       "[\]}\)\"]"
;; 	       "If this regexp matches the text after the cursor, do an \"electric\"
;;     return.")

;; 	     (defun electrify-return-if-match (arg)
;; 	       "If the text after the cursor matches `electrify-return-match' then
;;     open and indent an empty line between the cursor and the text.  Move the
;;     cursor to the new line."
;; 	       (interactive "P")
;; 	       (let ((case-fold-search nil))
;; 		 (if (looking-at electrify-return-match)
;; 		     (save-excursion (newline-and-indent)))
;; 		 (newline arg)
;; 		 (indent-according-to-mode)))

;; 	     (defun activate-electrify-return ()
;; 	       (local-set-key (kbd "RET") 'electrify-return-if-match))

;; 	     (defun activate-clojure-paredit-curly ()
;; 	       (define-key clojure-mode-map "{" 'paredit-open-curly)
;; 	       (define-key clojure-mode-map "}" 'paredit-close-curly))

;; 	     (defun setup-paredit-eldoc-commands ()
;; 	       (turn-on-eldoc-mode)
;; 	       (eldoc-add-command 'paredit-backward-delete
;; 				  'paredit-close-round
;; 				  'electrify-return-if-match))

;; 	     (add-hook 'clojure-mode-hook 'activate-clojure-paredit-curly)

;; 	     (add-hooks '(emacs-lisp-mode-hook)
;; 			'(activate-electrify-return
;; 			  setup-paredit-eldoc-commands))

;;   ;;; paredit doesn't do this automatically
;; 	     (add-hooks
;; 	      '(clojure-mode-hook
;; 		emacs-lisp-mode-hook
;; 		lisp-interaction-mode-hook
;; 		lisp-mode-hook
;; 		scheme-mode-hook)
;; 	      '(enable-paredit-mode))

;;   ;;; paredit for javascript

;; 	     (defun my-paredit-nonlisp ()
;; 	       "Turn on paredit mode for non-lisps."
;; 	       (interactive)
;; 	       (set (make-local-variable 'paredit-space-for-delimiter-predicates)
;; 		    '((lambda (endp delimiter) nil)))
;; 	       (paredit-mode 1))

;; 	     (defun activate-js2-paredit-curly ()
;; 	       (define-key js2-mode-map "{" 'paredit-open-curly)
;; 	       (define-key js2-mode-map "}" 'paredit-close-curly))

;; 	     (add-hook 'js2-mode-hook 'activate-js2-paredit-curly)

;; 	     ;; (add-hooks
;; 	     ;;  '(js-mode-hook js2-mode-hook)
;; 	     ;;  '(my-paredit-nonlisp))
;;              )
#+END_SRC

** TODO pkg-info

** TODO popup

** prettier-js

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :ensure t
  :init
  ;; (add-hook 'js2-mode-hook 'prettier-js-mode)
  (setq prettier-js-args '("--print-width" "70"
			   "--tab-width" "2"
			   "--single-quote"
			   "--trailing-comma" "es5")))
#+END_SRC

** queue

** TODO shut-up

** sl

#+BEGIN_SRC emacs-lisp
(use-package sl
  :ensure t)
#+END_SRC

** slack

#+BEGIN_SRC emacs-lisp
;; (use-package slack)
#+END_SRC

** smartparens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :init
  (add-hooks-pair '(clojure-mode
		    elixir-mode
		    emacs-lisp-mode
		    haskell-interactive-mode
		    haskell-mode
		    js-mode
		    js2-mode
		    ruby-mode
		    typescript-mode)
		  '(smartparens-strict-mode
		    show-smartparens-mode))
  :config (progn
	    (require 'smartparens-config)
	    (sp-use-paredit-bindings)))
#+END_SRC

** solarized-theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+END_SRC

** TODO tagedit

#+BEGIN_SRC emacs-lisp
;; (use-package tagedit
;; 	     :ensure t
;; 	     :init
;; 	     (tagedit-add-paredit-like-keybindings)
;; 	     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))
;; 	     (add-hook 'handlebars-mode-hook (lambda () (tagedit-mode 1))))
#+END_SRC

** TODO toml-mode

** TODO ts-comint

** typescript-mode

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :config (setq typescript-indent-level 2))
#+END_SRC

** waher-theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package waher-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+end_src

** yaml-mode

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC

** tron legacy emacs theme

#+BEGIN_SRC emacs-lisp
(use-package quelpa-use-package
  :ensure t)

(use-package tron-legacy-theme
  :quelpa (tron-legacy-theme :fetcher github :repo "ianpan870102/tron-legacy-emacs-theme")
  ;; :init (load-theme 'tron-legacy)
  )
#+END_SRC
