;;; init.el --- start here

;; install elpaca --- starts here

(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "--quick" "--directory" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; install elpaca --- ends here


;; --------------------------------------------------


;;; readme.el --- autogenerated by org-babel-load-file from readme.org ;;;
;;  -------------- do not edit this file directly --------------------  ;;

;; * Startup
;; ** debug on error
;; start debugger on any errors
(custom-set-variables
 '(debug-on-error t))

;; ** Package Management
;; *** elpaca
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (custom-set-variables
   '(elpaca-use-package-by-default t)))

;; Block until current queue processed.
(elpaca-wait)

;; private config

(add-to-list 'load-path
             (expand-file-name "lisp"
                               user-emacs-directory))
(require 'init-private)

;; *** package sources

;; @see https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/

(use-package gnutls
  :elpaca nil
  :config
  (custom-set-variables
   '(gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")))
;;(require 'package)
;;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;;(add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/")    t)

;; * Built-in Packages

(use-package dired
  :elpaca nil
  :config
  (custom-set-variables
   '(dired-dwim-target t)))

(use-package hl-line
  :elpaca nil
  :config
  (set-face-background 'hl-line "#073642"))

(use-package js
  :elpaca nil
  :config
  (custom-set-variables
   '(js-indent-level 2)))

(use-package subword
  :elpaca nil
  :hook ((haskell-mode
	  coffee-mode
	  js-mode
	  js2-mode
	  typescript-mode) . subword-mode))

;; * Default Config

;; ** TODO Frame - put this inside use-package

(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))

;; ** TODO General - put this inside use-package

;; just answer `y' or `n'.

(fset 'yes-or-no-p 'y-or-n-p)

;; ** TODO Custom File - can we put add-hook inside use-package

;; keep custom settings in a separate custom file

(use-package cus-edit
  :elpaca nil
  :config
  (let)
  (custom-set-variables
   (list 'custom-file (expand-file-name "custom.el" user-emacs-directory))))
(add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))

;; try to keep that file empty, and instead put all the customizations in this file.


;; ** Backup FIles

;; Place backup files in emacs's temp directory

(use-package files
  :elpaca nil
  :config
  (custom-set-variables
   '(backup-directory-alist '(("." . "~/.config/emacs/temp")))))

;; ** Lock Files

;; Lock files will interfere with some auto-build tools

(use-package emacs
  :elpaca nil
  :config
  (custom-set-variables
   '(create-lockfiles nil)))

;; ** TODO General Customizations - put this inside use-package

;; These are the customizations that may have lived in the custom file,
;; and don't have anything to do with any specific mode refered to
;; from use-package...

(ido-mode 'buffers)    ;; I only like ido-mode for switching buffers.
(blink-cursor-mode)    ;; turn blinking on
(column-number-mode t) ;; show columns
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-scroll-amount
      '((nil . 1)
	((control) . 3)
	((shift) . 5)
	((control shift) . 7)
	((meta) . 9)
	((meta control) . 11)
	((meta shift) . 13)
	((meta shift control) . 1.0)))

;; ** TODO Global Keybindings - put this inside use-package

;; Some global keybindings I like to use...

(bind-keys ("M-g h" . windmove-left)
           ("M-g j" . windmove-down)
           ("M-g k" . windmove-up)
           ("M-g l" . windmove-right)
           ("M-g M-h" . windmove-left)
           ("M-g M-j" . windmove-down)
           ("M-g M-k" . windmove-up)
           ("M-g M-l" . windmove-right)
           ("C-h" . delete-backward-char) ; like in the terminal
           ("M-h" . help-command)) ; rebind the help command
(bind-key "<s-return>" 'toggle-frame-fullscreen)

;; * Custom Config

;; ** Edit Config

;; quickly edit this file

(defun config ()
  (interactive)
  (let ((dir "~/.config/emacs"))
    (switch-to-buffer
     (find-file
      (expand-file-name "init.el" dir)))))

;; ** Convenient theme functions

(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)

;; * Locally Defined Packages

(use-package fira-code-mode
  :demand t
  :hook (js-mode js2-mode typescript-mode))

;; * Downloaded Packages

(use-package ace-jump-mode
  :demand t
  :bind (("C-;" . ace-jump-mode)
	 ("C-c SPC" . ace-jump-mode)
	 ("C-c C-SPC" . ace-jump-mode)))

(use-package add-hooks
  :demand t)

(use-package ag
  :demand t)

(use-package alchemist
  :demand t)

(use-package async
  :demand t)

(use-package auto-complete
  :demand t)

(use-package auto-highlight-symbol
  :demand t)

(use-package cider
  :demand t
  :init
  (custom-set-variables
   '(nrepl-hide-special-buffers t)
   '(cider-repl-pop-to-buffer-on-connect nil)
   '(cider-popup-stacktraces nil)
   '(cider-repl-popup-stacktraces t)))

(use-package clojure-mode
  :demand t)

(use-package company
  :demand t
  ;; :init
  ;; (global-company-mode)
  )

;; (use-package company-emoji
;;   :if (window-system)
;;   :init
;;   (defun --set-emoji-font (frame)
;;     "Adjust the font settings of FRAME so Emacs can display emoji properly."
;;     (if (eq system-type 'darwin)
;; 	;; For NS/Cocoa
;; 	(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
;;       ;; For Linux
;;       (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

;;   ;; For when Emacs is started in GUI mode:
;;   (--set-emoji-font nil)
;;   ;; Hook for when a frame is created with emacsclient
;;   ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
;;   :config
;;   (add-to-list 'company-backends 'company-emoji)
;;   (add-hook 'after-make-frame-functions '--set-emoji-font)
;;   (setq company-emoji-insert-unicode nil))

(use-package company-quickhelp
  :demand t
  ;; :init
  ;; (company-quickhelp-mode 1)
  )

(use-package cyberpunk-theme
  :if (window-system)
  :demand t
  :init
  (add-to-list
   'custom-safe-themes
   "77fac25c0276f636e3914636c45f714c2fd688fe1b1d40259be7ce84b8b5ab1e")
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
			:box nil)
    (set-face-attribute `mode-line-inactive nil
			:box nil)))

(use-package diminish
  :demand t)

(use-package discover-my-major
  :bind (("M-h M-m" . discover-my-major)
         ("M-h M-M" . discover-my-mode)))

(use-package edts
  :demand t)

(use-package elixir-mode
  :demand t)

(use-package elpy
  )

(use-package epl
  :demand t)

(use-package erlang
  :demand t)

;; (use-package eslint-fix
;;   :init
;;   (add-hook 'js2-mode-hook
;;             (lambda () 
;;               (add-hook 'after-save-hook 'eslint-fix nil t)
;;               ))
;;   (add-hook 'js-mode-hook
;;             (lambda () 
;;               (add-hook 'after-save-hook 'eslint-fix nil t)
;;               )))


;; In NextStep (OSX) window mode load the path settings from the shell

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :demand t
  :init
  (setq exec-path-from-shell-variables
	'("PATH"
	  "MANPATH"
	  "GOPATH"
	  "MAVEN_OPTS"))
  (exec-path-from-shell-initialize))

(use-package handlebars-sgml-mode
  :demand t)

;; (use-package jabber
;;              ;; :demand t
;;              )

;; TODO - use :hooks

(use-package js-comint
  :demand t
  :init
  (add-hook 'js2-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
	      (local-set-key (kbd "C-c b") 'js-send-buffer))))

;; (use-package js2-highlight-vars
;;   :init
;;   (add-hook 'js2-mode-hook 'js2-highlight-vars-mode))

(use-package js2-mode
  :demand t
  :mode (("\\.js\\'" . js2-mode)
	 ("\\.json\\'" . js2-mode))
  :init
  (setq inferior-js-program-command "node"))

(use-package less-css-mode
  :demand t)

(use-package lua-mode
  :demand t)

(use-package magit
  :demand t
  :init
  (bind-key "C-x g" 'magit-status))

(use-package magit-popup
  :demand t)

(use-package markdown-mode
  :demand t
  :mode (("\\.md\\'" . markdown-mode)))

(use-package neotree
  :demand t
  :init
  (bind-key [f8] 'neotree-toggle))

(use-package ob-restclient
  :demand t)

(use-package ob-http
  :demand t)

(use-package ob-sql-mode
  :demand t)

;; TODO put this in use-package

(use-package org
  :demand t)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-use-speed-commands t)
(setq org-return-follows-link t)
(setq org-src-preserve-indentation t)
(setq org-agenda-custom-commands
      '(("w" todo "WAITING" nil)
        ("n" todo "NEXT" nil)
        ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))


;; todo: find a better location for this
(setq org-ditaa-jar-path
      "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar")
(setq org-plantuml-jar-path
      "/usr/local/Cellar/plantuml/1.2017.14/libexec/plantuml.jar")


;; ** org-babel

;; (org-babel-do-load-languages 'org-babel-load-languages
;; 			     '((emacs-lisp . t)
;; 			       (plantuml   . t)
;; 			       (python     . t)
;; 			       (ditaa      . t)
;; 			       (clojure    . t)
;; 			       (shell      . t)
;; 			       (http       . t)
;; 			       (sql        . t)))

;; Use cider as the clojure execution backend
(setq org-babel-clojure-backend 'cider)

;; Let's have pretty source code blocks
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively        t
      org-src-fontify-natively         t
      org-confirm-babel-evaluate       nil)

;; (use-package org-plus-contrib
;; 	     :demand t)

(use-package origami
  :demand t
  ;; TODO: keybindings
  )

(use-package ox-reveal
  :demand t)

;; ** TODO org-drill

;; ** TODO package-build

;; ** TODO pallet

;; (use-package paredit
;; 	     :demand t
;; 	     :init

;; 	     (autoload 'enable-paredit-mode "paredit"
;; 	       "Turn on pseudo-structural editing of Lisp code."
;; 	       t)

;; 	     (defvar electrify-return-match
;; 	       "[\]}\)\"]"
;; 	       "If this regexp matches the text after the cursor, do an \"electric\"
;;     return.")

;; 	     (defun electrify-return-if-match (arg)
;; 	       "If the text after the cursor matches `electrify-return-match' then
;;     open and indent an empty line between the cursor and the text.  Move the
;;     cursor to the new line."
;; 	       (interactive "P")
;; 	       (let ((case-fold-search nil))
;; 		 (if (looking-at electrify-return-match)
;; 		     (save-excursion (newline-and-indent)))
;; 		 (newline arg)
;; 		 (indent-according-to-mode)))

;; 	     (defun activate-electrify-return ()
;; 	       (local-set-key (kbd "RET") 'electrify-return-if-match))

;; 	     (defun activate-clojure-paredit-curly ()
;; 	       (define-key clojure-mode-map "{" 'paredit-open-curly)
;; 	       (define-key clojure-mode-map "}" 'paredit-close-curly))

;; 	     (defun setup-paredit-eldoc-commands ()
;; 	       (turn-on-eldoc-mode)
;; 	       (eldoc-add-command 'paredit-backward-delete
;; 				  'paredit-close-round
;; 				  'electrify-return-if-match))

;; 	     (add-hook 'clojure-mode-hook 'activate-clojure-paredit-curly)

;; 	     (add-hooks '(emacs-lisp-mode-hook)
;; 			'(activate-electrify-return
;; 			  setup-paredit-eldoc-commands))

;;   ;;; paredit doesn't do this automatically
;; 	     (add-hooks
;; 	      '(clojure-mode-hook
;; 		emacs-lisp-mode-hook
;; 		lisp-interaction-mode-hook
;; 		lisp-mode-hook
;; 		scheme-mode-hook)
;; 	      '(enable-paredit-mode))

;;   ;;; paredit for javascript

;; 	     (defun my-paredit-nonlisp ()
;; 	       "Turn on paredit mode for non-lisps."
;; 	       (interactive)
;; 	       (set (make-local-variable 'paredit-space-for-delimiter-predicates)
;; 		    '((lambda (endp delimiter) nil)))
;; 	       (paredit-mode 1))

;; 	     (defun activate-js2-paredit-curly ()
;; 	       (define-key js2-mode-map "{" 'paredit-open-curly)
;; 	       (define-key js2-mode-map "}" 'paredit-close-curly))

;; 	     (add-hook 'js2-mode-hook 'activate-js2-paredit-curly)

;; 	     ;; (add-hooks
;; 	     ;;  '(js-mode-hook js2-mode-hook)
;; 	     ;;  '(my-paredit-nonlisp))
;;              )

;; ** TODO pkg-info

;; ** TODO popup

(use-package prettier-js
  :demand t
  :init
  ;; (add-hook 'js2-mode-hook 'prettier-js-mode)
  (custom-set-variables
   '(prettier-js-args '("--print-width" "70"
			"--tab-width" "2"
			"--single-quote"
			"--trailing-comma" "es5"))))

(use-package python-mode
  :ensure t)

;; ** queue

;; ** TODO shut-up

(use-package sl
  :demand t)

;; (use-package slack)

(use-package smartparens
  :demand t
  :init
  (add-hooks-pair '(cider-repl-mode
		    clojure-mode
		    elixir-mode
		    emacs-lisp-mode
		    haskell-interactive-mode
		    haskell-mode
		    js-mode
		    js2-mode
		    ruby-mode
		    typescript-mode)
		  '(smartparens-strict-mode
		    show-smartparens-mode))
  :config (progn
	    (require 'smartparens-config)
	    (sp-use-paredit-bindings)))

(use-package solarized-theme
  :demand t
  :defer 10
  :config
  (custom-set-variables
   '(solarized-use-variable-pitch nil)))

;; (use-package tagedit
;; 	     :demand t
;; 	     :init
;; 	     (tagedit-add-paredit-like-keybindings)
;; 	     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))
;; 	     (add-hook 'handlebars-mode-hook (lambda () (tagedit-mode 1))))

;; ** TODO toml-mode

;; ** TODO ts-comint

(use-package typescript-mode
  :demand t
  :config (setq typescript-indent-level 2))

(use-package waher-theme
  :if (window-system)
  :demand t
  :init
  (load-theme 'waher))

(use-package wakatime-mode
  :ensure t
  :init
  (custom-set-variables
   ;; see init-private
   '(wakatime-cli-path "/opt/homebrew/bin/wakatime-cli"))
  :config
  (global-wakatime-mode))

(use-package weblorg
  :demand t)

(use-package yaml-mode
  :demand t)

;; (use-package quelpa-use-package
;;   :demand t)

;; (use-package tron-legacy-theme
;;   :quelpa (tron-legacy-theme :fetcher github :repo "ianpan870102/tron-legacy-emacs-theme")
;;   ;; :init (load-theme 'tron-legacy)
;;   )

;; ** TODO combobulate

;; --------------------------------------------------

(provide 'init)

;;; init.el ends here

;; TODO - why using :custom keyword results in setq rather than custom-set-variables
